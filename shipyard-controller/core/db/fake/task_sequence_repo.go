// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/keptn/shipyard-controller/core/state"
	"sync"
)

// ITaskSequenceExecutionStateRepoMock is a mock implementation of db.ITaskSequenceExecutionStateRepo.
//
// 	func TestSomethingThatUsesITaskSequenceExecutionStateRepo(t *testing.T) {
//
// 		// make and configure a mocked db.ITaskSequenceExecutionStateRepo
// 		mockedITaskSequenceExecutionStateRepo := &ITaskSequenceExecutionStateRepoMock{
// 			GetFunc: func(keptnContext string, triggeredID string, taskName string) (*state.TaskSequenceExecutionState, error) {
// 				panic("mock out the Get method")
// 			},
// 			StoreFunc: func(stateMoqParam state.TaskSequenceExecutionState) error {
// 				panic("mock out the Store method")
// 			},
// 			UpdateFunc: func(stateMoqParam state.TaskSequenceExecutionState) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedITaskSequenceExecutionStateRepo in code that requires db.ITaskSequenceExecutionStateRepo
// 		// and then make assertions.
//
// 	}
type ITaskSequenceExecutionStateRepoMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(keptnContext string, triggeredID string, taskName string) (*state.TaskSequenceExecutionState, error)

	// StoreFunc mocks the Store method.
	StoreFunc func(stateMoqParam state.TaskSequenceExecutionState) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(stateMoqParam state.TaskSequenceExecutionState) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// KeptnContext is the keptnContext argument value.
			KeptnContext string
			// TriggeredID is the triggeredID argument value.
			TriggeredID string
			// TaskName is the taskName argument value.
			TaskName string
		}
		// Store holds details about calls to the Store method.
		Store []struct {
			// StateMoqParam is the stateMoqParam argument value.
			StateMoqParam state.TaskSequenceExecutionState
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// StateMoqParam is the stateMoqParam argument value.
			StateMoqParam state.TaskSequenceExecutionState
		}
	}
	lockGet    sync.RWMutex
	lockStore  sync.RWMutex
	lockUpdate sync.RWMutex
}

// Get calls GetFunc.
func (mock *ITaskSequenceExecutionStateRepoMock) Get(keptnContext string, triggeredID string, taskName string) (*state.TaskSequenceExecutionState, error) {
	if mock.GetFunc == nil {
		panic("ITaskSequenceExecutionStateRepoMock.GetFunc: method is nil but ITaskSequenceExecutionStateRepo.Get was just called")
	}
	callInfo := struct {
		KeptnContext string
		TriggeredID  string
		TaskName     string
	}{
		KeptnContext: keptnContext,
		TriggeredID:  triggeredID,
		TaskName:     taskName,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(keptnContext, triggeredID, taskName)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedITaskSequenceExecutionStateRepo.GetCalls())
func (mock *ITaskSequenceExecutionStateRepoMock) GetCalls() []struct {
	KeptnContext string
	TriggeredID  string
	TaskName     string
} {
	var calls []struct {
		KeptnContext string
		TriggeredID  string
		TaskName     string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Store calls StoreFunc.
func (mock *ITaskSequenceExecutionStateRepoMock) Store(stateMoqParam state.TaskSequenceExecutionState) error {
	if mock.StoreFunc == nil {
		panic("ITaskSequenceExecutionStateRepoMock.StoreFunc: method is nil but ITaskSequenceExecutionStateRepo.Store was just called")
	}
	callInfo := struct {
		StateMoqParam state.TaskSequenceExecutionState
	}{
		StateMoqParam: stateMoqParam,
	}
	mock.lockStore.Lock()
	mock.calls.Store = append(mock.calls.Store, callInfo)
	mock.lockStore.Unlock()
	return mock.StoreFunc(stateMoqParam)
}

// StoreCalls gets all the calls that were made to Store.
// Check the length with:
//     len(mockedITaskSequenceExecutionStateRepo.StoreCalls())
func (mock *ITaskSequenceExecutionStateRepoMock) StoreCalls() []struct {
	StateMoqParam state.TaskSequenceExecutionState
} {
	var calls []struct {
		StateMoqParam state.TaskSequenceExecutionState
	}
	mock.lockStore.RLock()
	calls = mock.calls.Store
	mock.lockStore.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ITaskSequenceExecutionStateRepoMock) Update(stateMoqParam state.TaskSequenceExecutionState) error {
	if mock.UpdateFunc == nil {
		panic("ITaskSequenceExecutionStateRepoMock.UpdateFunc: method is nil but ITaskSequenceExecutionStateRepo.Update was just called")
	}
	callInfo := struct {
		StateMoqParam state.TaskSequenceExecutionState
	}{
		StateMoqParam: stateMoqParam,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(stateMoqParam)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedITaskSequenceExecutionStateRepo.UpdateCalls())
func (mock *ITaskSequenceExecutionStateRepoMock) UpdateCalls() []struct {
	StateMoqParam state.TaskSequenceExecutionState
} {
	var calls []struct {
		StateMoqParam state.TaskSequenceExecutionState
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
