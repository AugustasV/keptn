// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	keptnv2 "github.com/keptn/go-utils/pkg/lib/v0_2_0"
	"sync"
)

// IShipyardRepoMock is a mock implementation of engine.IShipyardRepo.
//
// 	func TestSomethingThatUsesIShipyardRepo(t *testing.T) {
//
// 		// make and configure a mocked engine.IShipyardRepo
// 		mockedIShipyardRepo := &IShipyardRepoMock{
// 			GetTaskSequenceFunc: func(eventType string) (*keptnv2.Sequence, error) {
// 				panic("mock out the GetTaskSequence method")
// 			},
// 			SyncFunc: func(project string) (*keptnv2.Shipyard, error) {
// 				panic("mock out the Sync method")
// 			},
// 		}
//
// 		// use mockedIShipyardRepo in code that requires engine.IShipyardRepo
// 		// and then make assertions.
//
// 	}
type IShipyardRepoMock struct {
	// GetTaskSequenceFunc mocks the GetTaskSequence method.
	GetTaskSequenceFunc func(eventType string) (*keptnv2.Sequence, error)

	// SyncFunc mocks the Sync method.
	SyncFunc func(project string) (*keptnv2.Shipyard, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetTaskSequence holds details about calls to the GetTaskSequence method.
		GetTaskSequence []struct {
			// EventType is the eventType argument value.
			EventType string
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Project is the project argument value.
			Project string
		}
	}
	lockGetTaskSequence sync.RWMutex
	lockSync            sync.RWMutex
}

// GetTaskSequence calls GetTaskSequenceFunc.
func (mock *IShipyardRepoMock) GetTaskSequence(eventType string) (*keptnv2.Sequence, error) {
	if mock.GetTaskSequenceFunc == nil {
		panic("IShipyardRepoMock.GetTaskSequenceFunc: method is nil but IShipyardRepo.GetTaskSequence was just called")
	}
	callInfo := struct {
		EventType string
	}{
		EventType: eventType,
	}
	mock.lockGetTaskSequence.Lock()
	mock.calls.GetTaskSequence = append(mock.calls.GetTaskSequence, callInfo)
	mock.lockGetTaskSequence.Unlock()
	return mock.GetTaskSequenceFunc(eventType)
}

// GetTaskSequenceCalls gets all the calls that were made to GetTaskSequence.
// Check the length with:
//     len(mockedIShipyardRepo.GetTaskSequenceCalls())
func (mock *IShipyardRepoMock) GetTaskSequenceCalls() []struct {
	EventType string
} {
	var calls []struct {
		EventType string
	}
	mock.lockGetTaskSequence.RLock()
	calls = mock.calls.GetTaskSequence
	mock.lockGetTaskSequence.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *IShipyardRepoMock) Sync(project string) (*keptnv2.Shipyard, error) {
	if mock.SyncFunc == nil {
		panic("IShipyardRepoMock.SyncFunc: method is nil but IShipyardRepo.Sync was just called")
	}
	callInfo := struct {
		Project string
	}{
		Project: project,
	}
	mock.lockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	mock.lockSync.Unlock()
	return mock.SyncFunc(project)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedIShipyardRepo.SyncCalls())
func (mock *IShipyardRepoMock) SyncCalls() []struct {
	Project string
} {
	var calls []struct {
		Project string
	}
	mock.lockSync.RLock()
	calls = mock.calls.Sync
	mock.lockSync.RUnlock()
	return calls
}
